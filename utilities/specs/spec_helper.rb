# frozen_string_literal: true

# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See https://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

require 'rspec'
require 'rack'

require 'capybara/rspec'
# require 'capybara-screenshot/rspec'
require 'rack/test'
require 'axe-rspec'
require 'axe-capybara'
require 'capybara/dsl'
require 'capybara/session'
require 'capybara-screenshot'

# ===== bjc-r specific config/parsing....
# TODO: This code should be moved to support/parsing sections.
def load_site_urls(courses)
  # Map is a course_name => [url1, url2, ...]
  courses.map do |course|
    puts "Buidling URLs for #{course}..."
    [course, load_all_urls_in_course("#{course}.html")]
  end.to_h
end

def extract_urls_from_page(topic_file, course)
  topic_file = File.join(File.dirname(__FILE__), '..', '..', 'topic', topic_file)
  lang = topic_file.match(/\.(\w\w)\.topic/) ? Regexp.last_match(1) : 'en'
  topic_parser = BJCTopic.new(topic_file, course: course, language: lang)
  topic_parser.augmented_page_paths_in_topic
end

def load_all_urls_in_course(course)
  # Read the course page, then add all "Unit" URLs to the list
  # TODO: Use the BJCCourse class to extract the URLs
  results = [ "/bjc-r/course/#{course}" ]
  course_file = File.join(File.dirname(__FILE__), '..', '..', 'course', course)
  doc = Nokogiri::HTML(File.read(course_file))
  urls = doc.css('.topic_container .topic_link a').map { |url| url['href'] }

  topic_pages = urls.filter_map do |url|
    next unless url.match?(/\.topic/)

    query_separator = url.match?(/\?/) ? '&' : '?'
    results << "#{url}#{query_separator}course=#{course}"
    topic_file = url.match(/topic=(.*\.topic)/)[1]
    extract_urls_from_page(topic_file, course)
  end.flatten

  results << topic_pages
  results << urls.filter_map { |url| "#{url}#{url.match?(/\?/) ? '&' : '?'}course=#{course}" if !url.match?(/\.topic/) }
  results.flatten.reject { |u| !u.start_with?('/bjc-r') }.uniq
end

# ======== end bjc-r stuff ==========


# This is the root of the repository, e.g. the bjc-r directory
# Update this is you move this file.
REPO_ROOT = File.expand_path('../../', __dir__)

# https://nts.strzibny.name/how-to-test-static-sites-with-rspec-capybara-and-webkit/
class StaticSite
  attr_reader :root, :server

  def initialize(root)
    @root = root
    @server = Rack::File.new(root)
  end

  def call(env)
    # Remove the /bjc-r prefix, which is present in all URLs, but not in the file system.
    path = env['PATH_INFO'].gsub('/bjc-r', '')


    # Use index.html for / paths
    if path == '/' && exists?('index.html')
      env['PATH_INFO'] = '/index.html'
    elsif !exists?(path) && exists?(path + '.html')
      env['PATH_INFO'] = "#{path}.html"
    else
      env['PATH_INFO'] = path
    end

    server.call(env)
  end

  def exists?(path)
    File.exist?(File.join(root, path))
  end
end

Capybara::Screenshot.prune_strategy = :keep_last_run

Capybara.server = :webrick
Capybara.app = Rack::Builder.new do
  map '/' do
    use Rack::Lint
    run StaticSite.new(REPO_ROOT)
  end
end.to_app

Capybara.save_path = File.join(REPO_ROOT, 'tmp')

Capybara.register_driver :chrome_headless do |app|
  options = Selenium::WebDriver::Chrome::Options.new
  options.add_argument('--headless')
  options.add_argument('--no-sandbox')
  options.add_argument('--disable-dev-shm-usage')
  # macbook air ~13" screen width
  options.add_argument('--window-size=1280,2500')

  Capybara::Selenium::Driver.new(app, browser: :chrome, options:)
end

# Should be :chrome_headless in CI though.
Capybara.default_driver = :chrome_headless
Capybara.javascript_driver = :chrome_headless

# Capybara::Screenshot.register_driver(:chrome_headless) do |driver, path|
#   driver.save_screenshot(path, full: true)
# end

RSpec.configure do |config|
  config.include Capybara::DSL

  # Allow rspec to use `--only-failures` and `--next-failure` flags
  # Ensure that `tmp` is in your `.gitignore` file
  config.example_status_persistence_file_path = 'tmp/rspec-failures.txt'

  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    mocks.verify_partial_doubles = true
  end

  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
  # have no way to turn it off -- the option exists only for backwards
  # compatibility in RSpec 3). It causes shared context metadata to be
  # inherited by the metadata hash of host groups and examples, rather than
  # triggering implicit auto-inclusion in groups with matching metadata.
  config.shared_context_metadata_behavior = :apply_to_host_groups
end
